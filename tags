!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AMAX	lib_algorithms/str_questions.c	4;"	d	file:
ASIZE	lib_unittest/myunittest.c	5;"	d	file:
ASIZE	lib_unittest/myunittest.h	1;"	d
DataItem	mylearn/hash_table.c	/^struct DataItem{$/;"	s	file:
IN	c_kr_book/chapter1.c	3;"	d	file:
MAXCHAR	helloworld/parsefile.c	2;"	d	file:
MAXLINE	c_kr_book/chapter1.c	5;"	d	file:
MaxHeap	mylearn/heapsort.c	/^struct MaxHeap{$/;"	s	file:
OUT	c_kr_book/chapter1.c	4;"	d	file:
SIZE	mylearn/hash_table.c	5;"	d	file:
SIZEMAX	main_test.c	6;"	d	file:
arr	mylearn/heapsort.c	/^  int *arr;$/;"	m	struct:MaxHeap	file:
atoi	c_kr_book/chapter2.c	/^int atoi(char s[]){$/;"	f
atoi_v2	c_kr_book/chapter3.c	/^int atoi_v2(char s[]){$/;"	f
binary_insertion	sort.c	/^void binary_insertion(int *a,int size){$/;"	f
binary_search	lib_algorithms/array_questions.c	/^int binary_search(int a[], int x, int l, int r){$/;"	f
bubble_sort	lib_algorithms/array_questions.c	/^void bubble_sort(int *a, int size){$/;"	f
check_palindrome	lib_algorithms/str_questions.c	/^int check_palindrome(char arr[]){$/;"	f
check_string_anagram	lib_algorithms/str_questions.c	/^int check_string_anagram(char s1[], char s2[], int size){$/;"	f
copy	c_kr_book/chapter1.c	/^void copy(char to[], char from[]){$/;"	f
copy_input_to_output	c_kr_book/chapter1.c	/^void copy_input_to_output(){$/;"	f
count_characters	c_kr_book/chapter1.c	/^void count_characters(){$/;"	f
count_characters2	c_kr_book/chapter1.c	/^void count_characters2(){$/;"	f
count_lines	c_kr_book/chapter1.c	/^void count_lines(){$/;"	f
count_test_run	lib_unittest/myunittest.c	/^int count_test_run = 0;$/;"	v
createAndBuildHeap	mylearn/heapsort.c	/^struct MaxHeap* createAndBuildHeap(int *arr, int size){$/;"	f
data	mylearn/graph/bfs.c	/^  int data;$/;"	m	struct:node	file:
data	mylearn/hash_table.c	/^  int data;$/;"	m	struct:DataItem	file:
datasize	helloworld/parsefile.c	/^int datasize = 100;$/;"	v
delete	mylearn/hash_table.c	/^struct DataItem* delete(struct DataItem* item){$/;"	f
deletenext	lib_datastr/linked_list.c	/^void deletenext(struct node *n){$/;"	f
display	mylearn/hash_table.c	/^void display(){$/;"	f
display	mylearn/radix.c	/^void display(int* number, int length){$/;"	f
display	mylearn/radix1.c	/^void display(int* number, int length){$/;"	f
dummyItem	mylearn/hash_table.c	/^struct DataItem* dummyItem;$/;"	v	typeref:struct:DataItem
fib	mylearn/fib_dinamic.c	/^int fib(int n){$/;"	f
file_data_to_array	helloworld/parsefile.c	/^void file_data_to_array(int a[]){$/;"	f
filename	helloworld/parsefile.c	/^char* filename = "100nums.csv";$/;"	v
find_duplicate_characters	lib_algorithms/str_questions.c	/^void find_duplicate_characters(char s[], char dup[]){$/;"	f
find_max	mylearn/radix.c	/^int find_max(int* number, int length){$/;"	f
find_max	mylearn/radix1.c	/^int find_max(int* number, int length){$/;"	f
find_max_min	lib_algorithms/numbers.c	/^void find_max_min(int a[], int size, int answ[]){$/;"	f
first	lib_datastr/circ_link_list.c	/^struct node *first;$/;"	v	typeref:struct:node
get_median	lib_algorithms/array_questions.c	/^int get_median(int *a, int size){$/;"	f
get_time	lib_unittest/myunittest.c	/^double get_time(){$/;"	f
gethead_val	lib_datastr/linked_list.c	/^int gethead_val(){$/;"	f
getint	c_kr_book/chapter5.c	/^int getint(int *pn){$/;"	f
hashArray	mylearn/hash_table.c	/^struct DataItem* hashArray[SIZE];$/;"	v	typeref:struct:DataItem
hashCode	mylearn/hash_table.c	/^int hashCode(int key){$/;"	f
head	lib_datastr/linked_list.c	/^struct node *head, *trailer;$/;"	v	typeref:struct:node
heapSort	mylearn/heapsort.c	/^void heapSort(int *a, int size){$/;"	f
heap_sort	lib_algorithms/array_questions.c	/^void heap_sort(int *a, int size){$/;"	f
hello	mylearn/JavaStuff/hello.java	/^public class hello {$/;"	c
init	lib_datastr/linked_list.c	/^void init(int x){$/;"	f
init_cl	lib_datastr/circ_link_list.c	/^void init_cl(int val){$/;"	f
insert	lib_datastr/linked_list.c	/^void insert(int x){$/;"	f
insert	mylearn/hash_table.c	/^void insert(int key, int data){$/;"	f
insert_after	lib_datastr/linked_list.c	/^struct node *insert_after(int value, struct node *n){$/;"	f
insert_cl	lib_datastr/circ_link_list.c	/^void insert_cl(int val){$/;"	f
insertion_sort	lib_algorithms/array_questions.c	/^void insertion_sort(int a[], int size){$/;"	f
insertion_sort_char	lib_algorithms/array_questions.c	/^void insertion_sort_char(char s[], int size){$/;"	f
isdigit	c_kr_book/chapter2.c	/^int isdigit(int c){$/;"	f
item	mylearn/hash_table.c	/^struct DataItem* item;$/;"	v	typeref:struct:DataItem
itoa	c_kr_book/chapter3.c	/^void itoa(int n, char s[]){$/;"	f
key	lib_datastr/node.h	/^    int key;$/;"	m	struct:node
key	mylearn/hash_table.c	/^  int key;$/;"	m	struct:DataItem	file:
lower	c_kr_book/chapter2.c	/^int lower(int c){$/;"	f
main	c_kr_book/chapter5.c	/^int main(){$/;"	f
main	c_kr_book/main.c	/^int main(){$/;"	f
main	helloworld/hello.c	/^int main(int argc, char* argv[]){$/;"	f
main	helloworld/parsefile.c	/^int main() {$/;"	f
main	lib_datastr/quick_test.c	/^int main(int argc, char *argv[]){$/;"	f
main	main_test.c	/^int main(int argc, char* argv[]){$/;"	f
main	mylearn/JavaStuff/hello.java	/^  public static void main(String args[]){$/;"	m	class:hello
main	mylearn/fib_dinamic.c	/^int main(){$/;"	f
main	mylearn/graph/bfs.c	/^int main(){$/;"	f
main	mylearn/hash_table.c	/^int main(){$/;"	f
main	mylearn/heapsort.c	/^int main(){$/;"	f
main	mylearn/hello.c	/^int main(){$/;"	f
main	mylearn/quicksort.c	/^int main(){$/;"	f
main	mylearn/radix.c	/^int main(){$/;"	f
main	mylearn/radix1.c	/^int main(){$/;"	f
main	sort.c	/^int main(){$/;"	f
maxHeapify	mylearn/heapsort.c	/^void maxHeapify(struct MaxHeap* maxHeap, int idx){$/;"	f
merge	lib_algorithms/array_questions.c	/^void merge(int a[], int l, int m, int r){$/;"	f
merge_sort	lib_algorithms/array_questions.c	/^void merge_sort(int a[], int l, int r){$/;"	f
min_heapify	lib_algorithms/array_questions.c	/^void min_heapify(int *heap, int size){$/;"	f
my_getline	c_kr_book/chapter1.c	/^int my_getline(char s[], int lim){$/;"	f
my_strequal	lib_unittest/myunittest.c	/^int my_strequal(char *s1, char *s2){$/;"	f
my_strlen	lib_unittest/myunittest.c	/^int my_strlen(char *s){$/;"	f
next	c_kr_book/chapter2.c	/^unsigned long int next = 1;$/;"	v
next	lib_datastr/node.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
next	mylearn/graph/bfs.c	/^  struct node* next;$/;"	m	struct:node	typeref:struct:node::node	file:
node	lib_datastr/node.h	/^struct node {$/;"	s
node	mylearn/graph/bfs.c	/^struct node{$/;"	s	file:
partition	lib_algorithms/array_questions.c	/^int partition(int a[], int l, int r){$/;"	f
partition	mylearn/quicksort.c	/^int partition(int *a, int low, int high){$/;"	f
partition_qsort	sort.c	/^void partition_qsort(int *a, int size){$/;"	f
power	c_kr_book/chapter1.c	/^int power(int m, int n){$/;"	f
power2	c_kr_book/chapter1.c	/^int power2(int m, int n){$/;"	f
printArray	mylearn/heapsort.c	/^void printArray(int *a, int size){$/;"	f
printArray	mylearn/quicksort.c	/^void printArray(int *a, int size){$/;"	f
print_array	sort.c	/^void print_array(int *a, int size){$/;"	f
print_int_array	lib_unittest/myunittest.c	/^void print_int_array(int a[], int size){$/;"	f
print_list	lib_datastr/linked_list.c	/^void print_list(){$/;"	f
print_longest_input_line	c_kr_book/chapter1.c	/^void print_longest_input_line(){$/;"	f
print_test_status	lib_unittest/myunittest.c	/^void print_test_status(){$/;"	f
quickSort	mylearn/quicksort.c	/^void quickSort(int *a, int low, int high){$/;"	f
quick_sort	lib_algorithms/array_questions.c	/^void quick_sort(int a[], int l, int r){$/;"	f
rand	c_kr_book/chapter2.c	/^int rand(){$/;"	f
reset_dummy_array	main_test.c	/^void reset_dummy_array(int *a){$/;"	f
reverse	c_kr_book/chapter3.c	/^void reverse(char s[]){$/;"	f
reverse_array	lib_algorithms/str_questions.c	/^void reverse_array(char arr[]){$/;"	f
rmv_char_from_str	lib_algorithms/str_questions.c	/^void rmv_char_from_str(char s[], char c, int size){$/;"	f
rmv_char_from_str2	lib_algorithms/str_questions.c	/^void rmv_char_from_str2(char s[], char c, int size){$/;"	f
run_array_tests	main_test.c	/^void run_array_tests(){$/;"	f
run_number_tests	main_test.c	/^void run_number_tests(){$/;"	f
run_str_tests	main_test.c	/^void run_str_tests(){$/;"	f
search	mylearn/hash_table.c	/^struct DataItem* search(int key){$/;"	f
shaker_sort	sort.c	/^void shaker_sort(int *a, int size){$/;"	f
shell_sort	sort.c	/^void shell_sort(int *a, int size){$/;"	f
shellsort	c_kr_book/chapter3.c	/^void shellsort(int v[], int n){$/;"	f
shellsort	lib_algorithms/array_questions.c	/^void shellsort(int v[], int n){$/;"	f
sift	lib_algorithms/array_questions.c	/^void sift(int *a, int l, int r){$/;"	f
size	mylearn/heapsort.c	/^  int size;$/;"	m	struct:MaxHeap	file:
sort	mylearn/radix.c	/^int* sort(int* number, int length){$/;"	f
sort	mylearn/radix1.c	/^int* sort(int* number, int length){$/;"	f
srand	c_kr_book/chapter2.c	/^void srand(unsigned int seed){$/;"	f
str_size	lib_algorithms/str_questions.c	/^int str_size(char arr[]){$/;"	f
straight_insertion	sort.c	/^void straight_insertion(int* a, int size){$/;"	f
straignt_selection	lib_algorithms/array_questions.c	/^void straignt_selection(int* a, int size){$/;"	f
swap	c_kr_book/chapter5.c	/^void swap(int &a, int &b){$/;"	f
swap	mylearn/heapsort.c	/^void swap(int *a, int *b){ int t=*a; *a=*b;*b=t;}$/;"	f
swap	mylearn/quicksort.c	/^void swap(int *a, int *b){$/;"	f
swap_var_char_array	lib_algorithms/helper_func.c	/^void swap_var_char_array(char s[], int i, int j){$/;"	f
swap_var_int_array	lib_algorithms/helper_func.c	/^void swap_var_int_array(int a[], int i, int j){$/;"	f
swap_vars	sort.c	/^void swap_vars(int *a, int i, int j){$/;"	f
test_int_array_equal	lib_unittest/myunittest.c	/^void test_int_array_equal(int a[], int b[], int size){$/;"	f
test_intequal	lib_unittest/myunittest.c	/^void test_intequal(int a, int b, char *testname){$/;"	f
test_strequal	lib_unittest/myunittest.c	/^void test_strequal(char *s1, char *s2, char *testname){$/;"	f
trailer	lib_datastr/linked_list.c	/^struct node *head, *trailer;$/;"	v	typeref:struct:
traverse_list	lib_datastr/circ_link_list.c	/^void traverse_list(){$/;"	f
word_count	c_kr_book/chapter1.c	/^void word_count(){$/;"	f
